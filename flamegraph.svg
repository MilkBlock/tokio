<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="8185199"><g><title>[unknown] (97,812 samples, 1.19%)</title><rect x="0.0000%" y="325" width="1.1950%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="97812"/><text x="0.2500%" y="335.50"></text></g><g><title>[unknown] (6,365 samples, 0.08%)</title><rect x="1.1986%" y="309" width="0.0778%" height="15" fill="rgb(217,0,24)" fg:x="98110" fg:w="6365"/><text x="1.4486%" y="319.50"></text></g><g><title>exit (565,409 samples, 6.91%)</title><rect x="1.2764%" y="277" width="6.9077%" height="15" fill="rgb(221,193,54)" fg:x="104475" fg:w="565409"/><text x="1.5264%" y="287.50">exit</text></g><g><title>__run_exit_handlers (565,409 samples, 6.91%)</title><rect x="1.2764%" y="261" width="6.9077%" height="15" fill="rgb(248,212,6)" fg:x="104475" fg:w="565409"/><text x="1.5264%" y="271.50">__run_exi..</text></g><g><title>_dl_fini (565,409 samples, 6.91%)</title><rect x="1.2764%" y="245" width="6.9077%" height="15" fill="rgb(208,68,35)" fg:x="104475" fg:w="565409"/><text x="1.5264%" y="255.50">_dl_fini</text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (45,291 samples, 0.55%)</title><rect x="8.1841%" y="133" width="0.5533%" height="15" fill="rgb(232,128,0)" fg:x="669884" fg:w="45291"/><text x="8.4341%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (49,051 samples, 0.60%)</title><rect x="8.1841%" y="197" width="0.5993%" height="15" fill="rgb(207,160,47)" fg:x="669884" fg:w="49051"/><text x="8.4341%" y="207.50"></text></g><g><title>_ZN5tokio7runtime8blocking4pool12BlockingPool8shutdown17h16b2f5511ed83527E.llvm.2938749100239907228 (49,051 samples, 0.60%)</title><rect x="8.1841%" y="181" width="0.5993%" height="15" fill="rgb(228,23,34)" fg:x="669884" fg:w="49051"/><text x="8.4341%" y="191.50"></text></g><g><title>tokio::runtime::blocking::shutdown::Receiver::wait (49,051 samples, 0.60%)</title><rect x="8.1841%" y="165" width="0.5993%" height="15" fill="rgb(218,30,26)" fg:x="669884" fg:w="49051"/><text x="8.4341%" y="175.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (49,051 samples, 0.60%)</title><rect x="8.1841%" y="149" width="0.5993%" height="15" fill="rgb(220,122,19)" fg:x="669884" fg:w="49051"/><text x="8.4341%" y="159.50"></text></g><g><title>_ZN5tokio7runtime4park5Inner4park17h6057a25794a9375dE.llvm.2353707438579904632 (3,760 samples, 0.05%)</title><rect x="8.7374%" y="133" width="0.0459%" height="15" fill="rgb(250,228,42)" fg:x="715175" fg:w="3760"/><text x="8.9874%" y="143.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3,760 samples, 0.05%)</title><rect x="8.7374%" y="117" width="0.0459%" height="15" fill="rgb(240,193,28)" fg:x="715175" fg:w="3760"/><text x="8.9874%" y="127.50"></text></g><g><title>syscall (3,760 samples, 0.05%)</title><rect x="8.7374%" y="101" width="0.0459%" height="15" fill="rgb(216,20,37)" fg:x="715175" fg:w="3760"/><text x="8.9874%" y="111.50"></text></g><g><title>[unknown] (3,534 samples, 0.04%)</title><rect x="8.7402%" y="85" width="0.0432%" height="15" fill="rgb(206,188,39)" fg:x="715401" fg:w="3534"/><text x="8.9902%" y="95.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (9,721 samples, 0.12%)</title><rect x="8.7834%" y="117" width="0.1188%" height="15" fill="rgb(217,207,13)" fg:x="718935" fg:w="9721"/><text x="9.0334%" y="127.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (793,806 samples, 9.70%)</title><rect x="1.2764%" y="309" width="9.6981%" height="15" fill="rgb(231,73,38)" fg:x="104475" fg:w="793806"/><text x="1.5264%" y="319.50">__libc_start_m..</text></g><g><title>__libc_start_call_main (793,806 samples, 9.70%)</title><rect x="1.2764%" y="293" width="9.6981%" height="15" fill="rgb(225,20,46)" fg:x="104475" fg:w="793806"/><text x="1.5264%" y="303.50">__libc_start_c..</text></g><g><title>main (228,397 samples, 2.79%)</title><rect x="8.1841%" y="277" width="2.7904%" height="15" fill="rgb(210,31,41)" fg:x="669884" fg:w="228397"/><text x="8.4341%" y="287.50">ma..</text></g><g><title>std::rt::lang_start_internal (228,397 samples, 2.79%)</title><rect x="8.1841%" y="261" width="2.7904%" height="15" fill="rgb(221,200,47)" fg:x="669884" fg:w="228397"/><text x="8.4341%" y="271.50">st..</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h66059b7ee065dd55E.llvm.7052972798196072832 (228,397 samples, 2.79%)</title><rect x="8.1841%" y="245" width="2.7904%" height="15" fill="rgb(226,26,5)" fg:x="669884" fg:w="228397"/><text x="8.4341%" y="255.50">_Z..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (228,397 samples, 2.79%)</title><rect x="8.1841%" y="229" width="2.7904%" height="15" fill="rgb(249,33,26)" fg:x="669884" fg:w="228397"/><text x="8.4341%" y="239.50">st..</text></g><g><title>hello_world::main (228,397 samples, 2.79%)</title><rect x="8.1841%" y="213" width="2.7904%" height="15" fill="rgb(235,183,28)" fg:x="669884" fg:w="228397"/><text x="8.4341%" y="223.50">he..</text></g><g><title>tokio::runtime::builder::Builder::build (179,346 samples, 2.19%)</title><rect x="8.7834%" y="197" width="2.1911%" height="15" fill="rgb(221,5,38)" fg:x="718935" fg:w="179346"/><text x="9.0334%" y="207.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (179,346 samples, 2.19%)</title><rect x="8.7834%" y="181" width="2.1911%" height="15" fill="rgb(247,18,42)" fg:x="718935" fg:w="179346"/><text x="9.0334%" y="191.50">t..</text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (179,346 samples, 2.19%)</title><rect x="8.7834%" y="165" width="2.1911%" height="15" fill="rgb(241,131,45)" fg:x="718935" fg:w="179346"/><text x="9.0334%" y="175.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (179,346 samples, 2.19%)</title><rect x="8.7834%" y="149" width="2.1911%" height="15" fill="rgb(249,31,29)" fg:x="718935" fg:w="179346"/><text x="9.0334%" y="159.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (179,346 samples, 2.19%)</title><rect x="8.7834%" y="133" width="2.1911%" height="15" fill="rgb(225,111,53)" fg:x="718935" fg:w="179346"/><text x="9.0334%" y="143.50">t..</text></g><g><title>std::thread::Builder::spawn_unchecked (169,625 samples, 2.07%)</title><rect x="8.9021%" y="117" width="2.0723%" height="15" fill="rgb(238,160,17)" fg:x="728656" fg:w="169625"/><text x="9.1521%" y="127.50">s..</text></g><g><title>std::thread::Thread::new (169,625 samples, 2.07%)</title><rect x="8.9021%" y="101" width="2.0723%" height="15" fill="rgb(214,148,48)" fg:x="728656" fg:w="169625"/><text x="9.1521%" y="111.50">s..</text></g><g><title>malloc (169,625 samples, 2.07%)</title><rect x="8.9021%" y="85" width="2.0723%" height="15" fill="rgb(232,36,49)" fg:x="728656" fg:w="169625"/><text x="9.1521%" y="95.50">m..</text></g><g><title>_start (2,166,902 samples, 26.47%)</title><rect x="1.1950%" y="325" width="26.4734%" height="15" fill="rgb(209,103,24)" fg:x="97812" fg:w="2166902"/><text x="1.4450%" y="335.50">_start</text></g><g><title>_dl_start (1,366,433 samples, 16.69%)</title><rect x="10.9745%" y="309" width="16.6939%" height="15" fill="rgb(229,88,8)" fg:x="898281" fg:w="1366433"/><text x="11.2245%" y="319.50">_dl_start</text></g><g><title>_dl_sysdep_start (1,227,860 samples, 15.00%)</title><rect x="12.6674%" y="293" width="15.0010%" height="15" fill="rgb(213,181,19)" fg:x="1036854" fg:w="1227860"/><text x="12.9174%" y="303.50">_dl_sysdep_start</text></g><g><title>dl_main (1,227,860 samples, 15.00%)</title><rect x="12.6674%" y="277" width="15.0010%" height="15" fill="rgb(254,191,54)" fg:x="1036854" fg:w="1227860"/><text x="12.9174%" y="287.50">dl_main</text></g><g><title>[unknown] (1,227,860 samples, 15.00%)</title><rect x="12.6674%" y="261" width="15.0010%" height="15" fill="rgb(241,83,37)" fg:x="1036854" fg:w="1227860"/><text x="12.9174%" y="271.50">[unknown]</text></g><g><title>__getauxval (395,556 samples, 4.83%)</title><rect x="28.8086%" y="261" width="4.8326%" height="15" fill="rgb(233,36,39)" fg:x="2358041" fg:w="395556"/><text x="29.0586%" y="271.50">__geta..</text></g><g><title>__mmap (123,290 samples, 1.51%)</title><rect x="35.8440%" y="181" width="1.5063%" height="15" fill="rgb(226,3,54)" fg:x="2933899" fg:w="123290"/><text x="36.0940%" y="191.50"></text></g><g><title>[unknown] (123,290 samples, 1.51%)</title><rect x="35.8440%" y="165" width="1.5063%" height="15" fill="rgb(245,192,40)" fg:x="2933899" fg:w="123290"/><text x="36.0940%" y="175.50"></text></g><g><title>malloc (551,106 samples, 6.73%)</title><rect x="33.6412%" y="245" width="6.7330%" height="15" fill="rgb(238,167,29)" fg:x="2753597" fg:w="551106"/><text x="33.8912%" y="255.50">malloc</text></g><g><title>tcache_init.part.0 (551,106 samples, 6.73%)</title><rect x="33.6412%" y="229" width="6.7330%" height="15" fill="rgb(232,182,51)" fg:x="2753597" fg:w="551106"/><text x="33.8912%" y="239.50">tcache_in..</text></g><g><title>arena_get2.part.0 (370,804 samples, 4.53%)</title><rect x="35.8440%" y="213" width="4.5302%" height="15" fill="rgb(231,60,39)" fg:x="2933899" fg:w="370804"/><text x="36.0940%" y="223.50">arena..</text></g><g><title>alloc_new_heap (370,804 samples, 4.53%)</title><rect x="35.8440%" y="197" width="4.5302%" height="15" fill="rgb(208,69,12)" fg:x="2933899" fg:w="370804"/><text x="36.0940%" y="207.50">alloc..</text></g><g><title>__mprotect (247,514 samples, 3.02%)</title><rect x="37.3502%" y="181" width="3.0239%" height="15" fill="rgb(235,93,37)" fg:x="3057189" fg:w="247514"/><text x="37.6002%" y="191.50">__m..</text></g><g><title>[unknown] (247,514 samples, 3.02%)</title><rect x="37.3502%" y="165" width="3.0239%" height="15" fill="rgb(213,116,39)" fg:x="3057189" fg:w="247514"/><text x="37.6002%" y="175.50">[un..</text></g><g><title>hello_world (3,662,206 samples, 44.74%)</title><rect x="0.0000%" y="341" width="44.7418%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="3662206"/><text x="0.2500%" y="351.50">hello_world</text></g><g><title>clone3 (1,397,492 samples, 17.07%)</title><rect x="27.6684%" y="325" width="17.0734%" height="15" fill="rgb(206,96,30)" fg:x="2264714" fg:w="1397492"/><text x="27.9184%" y="335.50">clone3</text></g><g><title>start_thread (1,374,036 samples, 16.79%)</title><rect x="27.9550%" y="309" width="16.7868%" height="15" fill="rgb(218,138,4)" fg:x="2288170" fg:w="1374036"/><text x="28.2050%" y="319.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1,304,165 samples, 15.93%)</title><rect x="28.8086%" y="293" width="15.9332%" height="15" fill="rgb(250,191,14)" fg:x="2358041" fg:w="1304165"/><text x="29.0586%" y="303.50">std::sys::pal::unix::thre..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (1,304,165 samples, 15.93%)</title><rect x="28.8086%" y="277" width="15.9332%" height="15" fill="rgb(239,60,40)" fg:x="2358041" fg:w="1304165"/><text x="29.0586%" y="287.50">std::sys::pal::unix::stac..</text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (908,609 samples, 11.10%)</title><rect x="33.6412%" y="261" width="11.1006%" height="15" fill="rgb(206,27,48)" fg:x="2753597" fg:w="908609"/><text x="33.8912%" y="271.50">pthread_getattr_..</text></g><g><title>realloc (357,503 samples, 4.37%)</title><rect x="40.3741%" y="245" width="4.3677%" height="15" fill="rgb(225,35,8)" fg:x="3304703" fg:w="357503"/><text x="40.6241%" y="255.50">reall..</text></g><g><title>__call_tls_dtors (281,051 samples, 3.43%)</title><rect x="44.7418%" y="293" width="3.4336%" height="15" fill="rgb(250,213,24)" fg:x="3662206" fg:w="281051"/><text x="44.9918%" y="303.50">__c..</text></g><g><title>cfree@GLIBC_2.2.5 (281,051 samples, 3.43%)</title><rect x="44.7418%" y="277" width="3.4336%" height="15" fill="rgb(247,123,22)" fg:x="3662206" fg:w="281051"/><text x="44.9918%" y="287.50">cfr..</text></g><g><title>__malloc_arena_thread_freeres (331,905 samples, 4.05%)</title><rect x="48.1755%" y="293" width="4.0549%" height="15" fill="rgb(231,138,38)" fg:x="3943257" fg:w="331905"/><text x="48.4255%" y="303.50">__ma..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (291,849 samples, 3.57%)</title><rect x="52.2304%" y="245" width="3.5656%" height="15" fill="rgb(231,145,46)" fg:x="4275162" fg:w="291849"/><text x="52.4804%" y="255.50">std:..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (63,049 samples, 0.77%)</title><rect x="55.7960%" y="229" width="0.7703%" height="15" fill="rgb(251,118,11)" fg:x="4567011" fg:w="63049"/><text x="56.0460%" y="239.50"></text></g><g><title>syscall (3,165 samples, 0.04%)</title><rect x="56.5276%" y="213" width="0.0387%" height="15" fill="rgb(217,147,25)" fg:x="4626895" fg:w="3165"/><text x="56.7776%" y="223.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (178,091 samples, 2.18%)</title><rect x="56.5662%" y="229" width="2.1758%" height="15" fill="rgb(247,81,37)" fg:x="4630060" fg:w="178091"/><text x="56.8162%" y="239.50">p..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (92,752 samples, 1.13%)</title><rect x="67.2625%" y="117" width="1.1332%" height="15" fill="rgb(209,12,38)" fg:x="5505572" fg:w="92752"/><text x="67.5125%" y="127.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (92,752 samples, 1.13%)</title><rect x="67.2625%" y="101" width="1.1332%" height="15" fill="rgb(227,1,9)" fg:x="5505572" fg:w="92752"/><text x="67.5125%" y="111.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (719,296 samples, 8.79%)</title><rect x="68.3957%" y="117" width="8.7878%" height="15" fill="rgb(248,47,43)" fg:x="5598324" fg:w="719296"/><text x="68.6457%" y="127.50">tokio::runti..</text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17hc0e657333248609cE.llvm.5209294845973085395 (6,177 samples, 0.08%)</title><rect x="77.1835%" y="69" width="0.0755%" height="15" fill="rgb(221,10,30)" fg:x="6317620" fg:w="6177"/><text x="77.4335%" y="79.50"></text></g><g><title>mio::poll::Poll::poll (6,177 samples, 0.08%)</title><rect x="77.1835%" y="53" width="0.0755%" height="15" fill="rgb(210,229,1)" fg:x="6317620" fg:w="6177"/><text x="77.4335%" y="63.50"></text></g><g><title>epoll_wait (6,177 samples, 0.08%)</title><rect x="77.1835%" y="37" width="0.0755%" height="15" fill="rgb(222,148,37)" fg:x="6317620" fg:w="6177"/><text x="77.4335%" y="47.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17ha730057ff4e2d6bdE.llvm.7287890462107679065 (122,902 samples, 1.50%)</title><rect x="77.1835%" y="85" width="1.5015%" height="15" fill="rgb(234,67,33)" fg:x="6317620" fg:w="122902"/><text x="77.4335%" y="95.50"></text></g><g><title>tokio::time::clock::Clock::now (116,725 samples, 1.43%)</title><rect x="77.2589%" y="69" width="1.4260%" height="15" fill="rgb(247,98,35)" fg:x="6323797" fg:w="116725"/><text x="77.5089%" y="79.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2,234,410 samples, 27.30%)</title><rect x="58.7420%" y="213" width="27.2982%" height="15" fill="rgb(247,138,52)" fg:x="4808151" fg:w="2234410"/><text x="58.9920%" y="223.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2,234,410 samples, 27.30%)</title><rect x="58.7420%" y="197" width="27.2982%" height="15" fill="rgb(213,79,30)" fg:x="4808151" fg:w="2234410"/><text x="58.9920%" y="207.50">&lt;tokio::runtime::blocking::task::BlockingTas..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (2,234,410 samples, 27.30%)</title><rect x="58.7420%" y="181" width="27.2982%" height="15" fill="rgb(246,177,23)" fg:x="4808151" fg:w="2234410"/><text x="58.9920%" y="191.50">tokio::runtime::scheduler::multi_thread::wor..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (2,234,410 samples, 27.30%)</title><rect x="58.7420%" y="165" width="27.2982%" height="15" fill="rgb(230,62,27)" fg:x="4808151" fg:w="2234410"/><text x="58.9920%" y="175.50">tokio::runtime::context::runtime::enter_runt..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (2,234,410 samples, 27.30%)</title><rect x="58.7420%" y="149" width="27.2982%" height="15" fill="rgb(216,154,8)" fg:x="4808151" fg:w="2234410"/><text x="58.9920%" y="159.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (2,234,410 samples, 27.30%)</title><rect x="58.7420%" y="133" width="27.2982%" height="15" fill="rgb(244,35,45)" fg:x="4808151" fg:w="2234410"/><text x="58.9920%" y="143.50">tokio::runtime::scheduler::multi_thread::wor..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (724,941 samples, 8.86%)</title><rect x="77.1835%" y="117" width="8.8567%" height="15" fill="rgb(251,115,12)" fg:x="6317620" fg:w="724941"/><text x="77.4335%" y="127.50">tokio::runtim..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (724,941 samples, 8.86%)</title><rect x="77.1835%" y="101" width="8.8567%" height="15" fill="rgb(240,54,50)" fg:x="6317620" fg:w="724941"/><text x="77.4335%" y="111.50">tokio::runtim..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (602,039 samples, 7.36%)</title><rect x="78.6850%" y="85" width="7.3552%" height="15" fill="rgb(233,84,52)" fg:x="6440522" fg:w="602039"/><text x="78.9350%" y="95.50">parking_lo..</text></g><g><title>syscall (4,303 samples, 0.05%)</title><rect x="85.9876%" y="69" width="0.0526%" height="15" fill="rgb(207,117,47)" fg:x="7038258" fg:w="4303"/><text x="86.2376%" y="79.50"></text></g><g><title>all (8,185,199 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="8185199"/><text x="0.2500%" y="367.50"></text></g><g><title>tokio-runtime-w (4,522,993 samples, 55.26%)</title><rect x="44.7418%" y="341" width="55.2582%" height="15" fill="rgb(209,38,44)" fg:x="3662206" fg:w="4522993"/><text x="44.9918%" y="351.50">tokio-runtime-w</text></g><g><title>clone3 (4,522,993 samples, 55.26%)</title><rect x="44.7418%" y="325" width="55.2582%" height="15" fill="rgb(236,212,23)" fg:x="3662206" fg:w="4522993"/><text x="44.9918%" y="335.50">clone3</text></g><g><title>start_thread (4,522,993 samples, 55.26%)</title><rect x="44.7418%" y="309" width="55.2582%" height="15" fill="rgb(242,79,21)" fg:x="3662206" fg:w="4522993"/><text x="44.9918%" y="319.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3,910,037 samples, 47.77%)</title><rect x="52.2304%" y="293" width="47.7696%" height="15" fill="rgb(211,96,35)" fg:x="4275162" fg:w="3910037"/><text x="52.4804%" y="303.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,910,037 samples, 47.77%)</title><rect x="52.2304%" y="277" width="47.7696%" height="15" fill="rgb(253,215,40)" fg:x="4275162" fg:w="3910037"/><text x="52.4804%" y="287.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,910,037 samples, 47.77%)</title><rect x="52.2304%" y="261" width="47.7696%" height="15" fill="rgb(211,81,21)" fg:x="4275162" fg:w="3910037"/><text x="52.4804%" y="271.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3,618,188 samples, 44.20%)</title><rect x="55.7960%" y="245" width="44.2040%" height="15" fill="rgb(208,190,38)" fg:x="4567011" fg:w="3618188"/><text x="56.0460%" y="255.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,377,048 samples, 41.26%)</title><rect x="58.7420%" y="229" width="41.2580%" height="15" fill="rgb(235,213,38)" fg:x="4808151" fg:w="3377048"/><text x="58.9920%" y="239.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1,142,638 samples, 13.96%)</title><rect x="86.0402%" y="213" width="13.9598%" height="15" fill="rgb(237,122,38)" fg:x="7042561" fg:w="1142638"/><text x="86.2902%" y="223.50">tokio::runtime::task:..</text></g></svg></svg>